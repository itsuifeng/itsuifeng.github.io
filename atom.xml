<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Sanly's Blog]]></title>
  <subtitle><![CDATA[单身程序员一枚]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://itsuifeng.github.io//"/>
  <updated>2015-06-08T16:14:55.124Z</updated>
  <id>https://itsuifeng.github.io//</id>
  
  <author>
    <name><![CDATA[Sanly]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[国产化之-龙芯CPU上趟过的坑]]></title>
    <link href="https://itsuifeng.github.io/2015/06/08/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B9%8B-%E9%BE%99%E8%8A%AFCPU%E4%B8%8A%E8%B6%9F%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>https://itsuifeng.github.io/2015/06/08/国产化之-龙芯CPU上趟过的坑/</id>
    <published>2015-06-08T15:45:30.000Z</published>
    <updated>2015-06-08T16:14:55.124Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.loongson.cn/images/BANNER3.jpg" alt="龙芯"></p>
<hr>
<p>最近公司一直忙于将两个安全产品迁移部署到国产操作系统、国产数据库上，整个迁移过程，趟坑无数，依然存在许多问题亟需解决。龙芯为支持Java，针对OpenJDK（不是Oracle JDK）做了部分了修改，导致应用部署上去出现很多兼容性问题。</p>
<hr>
<ul>
<li>jdk1.8的版本，swing组件花屏；</li>
<li>麦克风录音时，直接抛异常（还好其中部分jdk1.6版本不存在此问题）；</li>
<li>Apache Derby数据库打开时，因无法读取数据库日志文件抛异常；</li>
<li>jdk1.7版本在龙芯CPU上完全是鸡肋，整个应用跑起来非常吃力，吐血的慢，而应用基于Oracle jdk1.7版本编译，无法在jdk1.6运行，不得不重新编译到1.6版本；</li>
<li>后续持续问题…</li>
</ul>
<hr>
<p><strong>感受：</strong> </p>
<blockquote>
<p>国产化道路任重而道远<br>革命尚未成功，同志仍需努力<br>路漫漫其修远兮，吾将上下而求索</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://www.loongson.cn/images/BANNER3.jpg" alt="龙芯"></p>
<hr>
<p>最近公司一直忙于将两个安全产品迁移部署到国产操作系统、国产数据库上，整个迁移过程，趟坑无数，依然存在许多问题亟需解决。龙芯为]]>
    </summary>
    
      <category term="操作系统" scheme="https://itsuifeng.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL优化之-工欲善其事，必先利其器]]></title>
    <link href="https://itsuifeng.github.io/2015/06/08/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8%E4%B9%8B-MySQL%E4%BC%98%E5%8C%96/"/>
    <id>https://itsuifeng.github.io/2015/06/08/工欲善其事，必先利其器之-MySQL优化/</id>
    <published>2015-06-08T12:39:21.000Z</published>
    <updated>2015-06-08T15:43:00.085Z</updated>
    <content type="html"><![CDATA[<hr>
<p>一开始从开发转数据库，觉得写SQL很简单？后来认识到too young too simple, sometimes naive. 正所谓：“查询容易，优化难，难于上青天。。。”，不过依然可以借助一些辅助工具逐渐入门，记录一些优化方式及心得。</p>
<hr>
<ol>
<li>优化不能漫无目的，海中捞针，自己累不说，工作也没有成效，应结合业务找出性能较差的SQL，一步一步的解决；</li>
<li>I/O访问永远是数据库性能开销的突出地方，应尽量避免多次I/O访问，也是优化最有效果的地方。（磁盘读取数据靠机械运动，每次读取数据花费的时间包括寻道时间、旋转延迟、传输时间，寻道是磁臂移动到指定磁道所需要的时间，旋转延迟指磁盘转速，传输时间指从磁盘读出或写入磁盘的时间）；</li>
<li>结合MySQL的查询分析器（explain、profile）慢日志分析工具，反复查看执行计划，新增、修改索引，不断优化SQL；</li>
</ol>
<hr>
<h6 id="以下是自己写的一些SQL工具：">以下是自己写的一些SQL工具：</h6><p>— 查看某表、某列的区分度情况<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) <span class="keyword">AS</span> <span class="string">'不重复记录数'</span>,</span><br><span class="line">	<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">'总记录数'</span>,</span><br><span class="line">	<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) / <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">'区分度'</span>,</span><br><span class="line">	<span class="keyword">COUNT</span>(*) / <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) <span class="keyword">AS</span> <span class="string">'检索次数'</span></span><br><span class="line"><span class="keyword">FROM</span> table_name</span></span><br></pre></td></tr></table></figure></p>
<p> — (查询系统表，利用列转行）计算QPS、TPS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(Questions) / <span class="keyword">SUM</span>(Uptime) <span class="keyword">AS</span> <span class="string">'QPS'</span>,</span><br><span class="line">	(<span class="keyword">SUM</span>(Com_commit) + <span class="keyword">SUM</span>(Com_rollback)) / <span class="keyword">SUM</span>(Uptime) <span class="keyword">AS</span> <span class="string">'TPS'</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="keyword">CASE</span> VARIABLE_NAME <span class="keyword">WHEN</span> <span class="string">'Questions'</span> <span class="keyword">THEN</span> VARIABLE_VALUE <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'Questions'</span>,</span><br><span class="line">		<span class="keyword">CASE</span> VARIABLE_NAME <span class="keyword">WHEN</span> <span class="string">'Uptime'</span> 	<span class="keyword">THEN</span> VARIABLE_VALUE <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'Uptime'</span>,</span><br><span class="line">		<span class="keyword">CASE</span> VARIABLE_NAME <span class="keyword">WHEN</span> <span class="string">'Com_commit'</span> <span class="keyword">THEN</span> VARIABLE_VALUE <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'Com_commit'</span>,</span><br><span class="line">		<span class="keyword">CASE</span> VARIABLE_NAME <span class="keyword">WHEN</span> <span class="string">'Com_rollback'</span> <span class="keyword">THEN</span> VARIABLE_VALUE <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'Com_rollback'</span></span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		information_schema.GLOBAL_STATUS</span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		VARIABLE_NAME <span class="keyword">IN</span> (<span class="string">'Questions'</span>, <span class="string">'Uptime'</span>, <span class="string">'Com_commit'</span>, <span class="string">'Com_rollback'</span>)</span><br><span class="line">) <span class="keyword">AS</span> tmp</span></span><br></pre></td></tr></table></figure></p>
<p>— 禁止MySQL缓存hack（通过在查询结果集加入时间，避免查询时使用缓存，影响性能分析）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> t.*, <span class="keyword">now</span>() <span class="keyword">FROM</span> rental t</span></span><br></pre></td></tr></table></figure></p>
<p>— 禁止MySQL缓存，根据数据库版本，有些时候不灵光<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">BEGIN</span>;</span></span><br><span class="line">	<span class="operator"><span class="keyword">RESET</span> <span class="keyword">QUERY</span> <span class="keyword">CACHE</span>;</span></span><br><span class="line">	<span class="operator"><span class="keyword">SELECT</span> <span class="keyword">SQL_NO_CACHE</span> t.* <span class="keyword">FROM</span> rental t ;</span></span><br><span class="line"><span class="operator"><span class="keyword">END</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>— 强制使用指定的某个索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> t.* <span class="keyword">FROM</span> rental t <span class="keyword">FORCE</span> <span class="keyword">INDEX</span> (index_update_time) </span><br><span class="line">	<span class="keyword">WHERE</span> type = <span class="number">2</span> <span class="keyword">AND</span> update_time &gt; <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> update_time <span class="keyword">DESC</span>;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>一开始从开发转数据库，觉得写SQL很简单？后来认识到too young too simple, sometimes naive. 正所谓：“查询容易，优化难，难于上青天。。。”，不过依然可以借助一些辅助工具逐渐入门，记录一些优化方式及心得。</p>
<hr>
<o]]>
    </summary>
    
      <category term="MySQL" scheme="https://itsuifeng.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java利器之-多输出流MutiOutputStream]]></title>
    <link href="https://itsuifeng.github.io/2015/06/07/Java%E5%88%A9%E5%99%A8%E4%B9%8B-%E5%A4%9A%E8%BE%93%E5%87%BA%E6%B5%81MutiOutputStream/"/>
    <id>https://itsuifeng.github.io/2015/06/07/Java利器之-多输出流MutiOutputStream/</id>
    <published>2015-06-07T06:46:18.000Z</published>
    <updated>2015-06-07T07:14:44.700Z</updated>
    <content type="html"><![CDATA[<hr>
<p>一些情况下，我希望I/O流能够一次性写入到任何输出流，比如网络、磁盘、管道、缓存、控制台、swing组件等，但是我不愿意重复写复制流的代码，于是多输出流MutiOutputStream应运而生；</p>
<hr>
<p><strong>应用场景:</strong> 首先我们看一下多输出流的应用场景，我在公司工作时遇到这样一个现实场景，底层框架catch了一个异常，这个异常通过调用<code>e.printStackTrace()</code>方法直接打印到控制台；逻辑层根本无法捕获这个异常，但是现实情况是我必须拿到这个异常，通过业务逻辑重新处理这个异常。也许看到这里很多朋友，会对此呲之以鼻，觉得这个异常是底层框架没有处理好，既然业务层需要处理这个异常，设计框架时应该将这个异常抛出，由义务层捕获并处理。不过于我而言，其实我给框架的作者进行了多次交流，但是框架的作者不希望抛出此异常，因此十分无奈，正所谓道高一尺、魔高一丈。既然无法说服别人，就要用不寻常的方式解决这个问题；</p>
<hr>
<p><strong>处理方案：</strong> 方案很简单，因为是偏方所以不建议大家这样做，遇到这样的问题还是最好多沟通，尽量由底层解决。我们知道<code>e.printStackTrace()</code>方法会将错误输出流定向到System.err流中，因此我将System.err输出流定向到一个·<code>ByteArrayOutputStream</code>中，对<code>ByteArrayOutputStream</code>进行解析，解析到需要的异常，直接处理掉异常；但是由此也引发一个问题，<code>System.err</code>被定向到<code>ByteArrayOutputStream</code>后，控制台将不会再打印错误信息，因此需要寻求一种方案，将<code>System.err</code>同时定向到<code>ByteArrayOutputStream</code>和<code>System.err</code>控制台本身。以下是部分实现逻辑。</p>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sanly.niu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FilterOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 一个流多个输出</span><br><span class="line"> * </span><br><span class="line"> * 应用场景： 既写入文件流，又写到控制台流</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> sanly</span><br><span class="line"> * <span class="doctag">@create</span> date 2015年5月18日</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutiOutputStream</span> <span class="keyword">extends</span> <span class="title">FilterOutputStream</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> OutputStream out2;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MutiOutputStream</span><span class="params">(OutputStream out1, OutputStream out2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(out1);</span><br><span class="line">		<span class="keyword">this</span>.out2 = out2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.write(b);</span><br><span class="line">		out2.write(b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.write(b);</span><br><span class="line">		out2.write(b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.write(b, off, len);</span><br><span class="line">		out2.write(b, off, len);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.flush();</span><br><span class="line">		out2.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.close();</span><br><span class="line">		out2.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>一些情况下，我希望I/O流能够一次性写入到任何输出流，比如网络、磁盘、管道、缓存、控制台、swing组件等，但是我不愿意重复写复制流的代码，于是多输出流MutiOutputStream应运而生；</p>
<hr>
<p><strong>应用场景:</strong>]]>
    </summary>
    
      <category term="Java" scheme="https://itsuifeng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java利器之-native加载]]></title>
    <link href="https://itsuifeng.github.io/2015/06/07/Java%E5%88%A9%E5%99%A8%E4%B9%8B-native%E5%8A%A0%E8%BD%BD/"/>
    <id>https://itsuifeng.github.io/2015/06/07/Java利器之-native加载/</id>
    <published>2015-06-07T05:22:06.000Z</published>
    <updated>2015-06-07T07:09:47.109Z</updated>
    <content type="html"><![CDATA[<hr>
<p>Java项目中有时候会涉及到一些第三方native调用，加载动态链接库(.dll、.so)文件经常会遇到一些错误，如无法加载，如何解决这个问题呢？</p>
<hr>
<ol>
<li>通过JVM启动参数设定<code>java -Djava.library.path=c：/naitve</code></li>
<li>在代码中设定<code>System.setProperty(&quot;java.library.path&quot;, &quot;c:/native&quot;);</code>(<font color="red">错误</font>);</li>
<li>利用反射机制注入库路劲，调用编写好的类<code>ClassPathTool.addToClassPath(&quot;c:/native&quot;)</code>实现。</li>
</ol>
<hr>
<ul>
<li>第一种方式是可以正确设置库文件加载路径的，程序能够正常运行；</li>
<li>第二种方式是不行的，java.library.path只有在JVM启动时候读取一次，因此使用第二种方式无法生效；</li>
<li>第三种方式通过反射机制注入库路径，能按照我的想法正常运行，以下是如何实现。</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClassPathTool</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	public <span class="literal">static</span> <span class="keyword">void</span> addToClassPath(File classPathFile) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Field field = ClassLoader.<span class="keyword">class</span>.getDeclaredField(<span class="string">"usr_paths"</span>);</span><br><span class="line">			field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">Object</span> obj = field.<span class="literal">get</span>(<span class="keyword">null</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(Arrays.asList(((<span class="built_in">String</span>[]) obj)));</span><br><span class="line">			list.add(classPathFile.getAbsolutePath());</span><br><span class="line">			<span class="keyword">for</span>(File f : classPathFile.listFiles()) &#123;</span><br><span class="line">				list.add(f.getAbsolutePath());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">String</span>[] arr = <span class="keyword">new</span> <span class="built_in">String</span>[<span class="number">0</span>];</span><br><span class="line">			field.<span class="literal">set</span>(<span class="keyword">null</span>, (<span class="built_in">String</span>[]) list.toArray(arr));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>Java项目中有时候会涉及到一些第三方native调用，加载动态链接库(.dll、.so)文件经常会遇到一些错误，如无法加载，如何解决这个问题呢？</p>
<hr>
<ol>
<li>通过JVM启动参数设定<code>java -Djava.library.pat]]>
    </summary>
    
      <category term="Java" scheme="https://itsuifeng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何查看windows文件/文件夹占用进程]]></title>
    <link href="https://itsuifeng.github.io/2015/06/06/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bwindows%E6%96%87%E4%BB%B6-%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B/"/>
    <id>https://itsuifeng.github.io/2015/06/06/如何查看windows文件-文件夹占用进程/</id>
    <published>2015-06-06T07:12:31.000Z</published>
    <updated>2015-06-06T07:18:17.429Z</updated>
    <content type="html"><![CDATA[<hr>
<p>很多情况下，我会遇到在删除windows系统下某个文件或文件夹时，系统提示我该文件或文件夹被其它进程占用，从而无法删除该文件。也许你会尝试安装一些其它辅助软件（比如<span style="color:red">流氓360软件、XX卸载大师</span>），反正我觉得这个实在是太重量级了，况且我根本不想安装这些XX软件。那么到底还有没有其它更加方便的方法可以让我找到是哪一个进程占用了该文件呢？</p>
<blockquote>
<ol>
<li>右键 - Windows 7任务栏 - 启动任务管理器 - 性能 - 资源监视器；</li>
<li>在控制台中点击“CPU”标签定位到该标签页下；</li>
<li>在“关联的句柄”右侧的搜索框中输入“test”，此时系统会自动搜索与test句柄相关联的系统进程；</li>
<li>可以看到搜索到的进程为cmd.exe。cmd.exe进程正在调用test文件夹，才造成了对该文件夹删除的失败。右键单击该进程，然后选择“结束进程”命令弹出警告对话框，确认后即可结束cmd.exe进程。最后，删除test文件夹，可以看到该文件夹被成功删除。</li>
</ol>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>很多情况下，我会遇到在删除windows系统下某个文件或文件夹时，系统提示我该文件或文件夹被其它进程占用，从而无法删除该文件。也许你会尝试安装一些其它辅助软件（比如<span style="color:red">流氓360软件、XX卸载大师</span>），反正我]]>
    </summary>
    
      <category term="windows" scheme="https://itsuifeng.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用hexo、markdown、git在github上建立自己的博客]]></title>
    <link href="https://itsuifeng.github.io/2015/06/05/%E5%88%A9%E7%94%A8hexo%E3%80%81markdown%E3%80%81git%E5%9C%A8github%E4%B8%8A%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://itsuifeng.github.io/2015/06/05/利用hexo、markdown、git在github上建立自己的博客/</id>
    <published>2015-06-05T07:26:01.000Z</published>
    <updated>2015-06-08T15:14:51.926Z</updated>
    <content type="html"><![CDATA[<hr>
<p>搭建个人博客的方式其实有很多种，尤其是对于程序员而言甚至可以自己写一套博客程序，可以选择的平台其实也非常多，著名的WordPress就是一个，我曾经在大学期间倒腾过WordPress，WordPress是一个很优秀、具有大量用户但也十分臃肿的系统，不仅需要关注写作，还需要倒腾各种五花八门的插件、管理维护MySQL数据库，总之来言对于经历有限的我而言，我选择放弃。直到最近又萌生了写博客的想法，选择了程序员中使用最为流行的github pages服务来提供个人博客支持，倒腾过WordPress之后遇到它，我不得不说使用起来非常方便。</p>
<hr>
<h6 id="介绍一下Windows平台搭建环境使用到的工具：">介绍一下Windows平台搭建环境使用到的工具：</h6><ul>
<li>TortoiseGit （版本控制软件，用途： 检出、提交代码）</li>
<li>MarkdwownPad2  （写作软件， 用途： 一种类似html语法的编辑器、主要用于写作、排版）</li>
<li>nodejs （服务器端的JavaScript编译、运行环境， 用途： 编译、运行node程序）</li>
<li>hexo （一款node程序，用途：基于主题编译markdown生成html、支持发布到github）</li>
</ul>
<hr>
<h6 id="个人使用习惯">个人使用习惯</h6><ol>
<li>cmd&gt; hexo new 文章名称 （创建一篇新文章）</li>
<li>利用MarkdwownPad2编辑创建的新文章 （开始写作）</li>
<li>cmd&gt; hexo g  （编译markdwon生成html)</li>
<li>cmd&gt; hexo d  （部署生成的html）</li>
<li>cmd&gt; hexo s  （启动服务器，访问<a href="http://127.0.0.1:4000查看实时变更）" target="_blank" rel="external">http://127.0.0.1:4000查看实时变更）</a></li>
<li>cmd&gt; git push （将生成的html推送到github）</li>
<li>访问<a href="https://itsuifeng.github.io">https://itsuifeng.github.io</a> </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>搭建个人博客的方式其实有很多种，尤其是对于程序员而言甚至可以自己写一套博客程序，可以选择的平台其实也非常多，著名的WordPress就是一个，我曾经在大学期间倒腾过WordPress，WordPress是一个很优秀、具有大量用户但也十分臃肿的系统，不仅需要关注写作]]>
    </summary>
    
      <category term="github" scheme="https://itsuifeng.github.io/tags/github/"/>
    
  </entry>
  
</feed>